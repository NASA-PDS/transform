<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="https://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1K00.sch"
  schematypens="http://purl.oclc.org/dsdl/schematron"?>
<Product_Observational xmlns="http://pds.nasa.gov/pds4/pds/v1"
    xmlns:pds="http://pds.nasa.gov/pds4/pds/v1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pds.nasa.gov/pds4/pds/v1 https://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1K00.xsd">
  <Identification_Area>
  #if ( $label.PRODUCT_ID )
    <logical_identifier>urn:nasa:pds:data:$label.DATA_SET_ID[0].toLowerCase().replaceAll("/","-"):$label.PRODUCT_ID[0].toLowerCase()</logical_identifier>
    #set ($title = $label.DATA_SET_ID[0].toLowerCase().concat(" ").concat($label.PRODUCT_ID[0].toLowerCase()))
  #else
    <logical_identifier>urn:nasa:pds:data:$label.DATA_SET_ID[0].toLowerCase().replaceAll("/","-"):$generate.file_name[0].toLowerCase()</logical_identifier>
    #set ($title = $label.DATA_SET_ID[0].toLowerCase())
  #end
    <version_id>1.0</version_id>
  #if ( $label.OBSERVATION_NAME )
     <title>$label.OBSERVATION_NAME[0].toLowerCase()</title>
  #elseif ( $label.OBSERVATION_ID )
     <title>$label.OBSERVATION_ID[0].toLowerCase()</title>
  #elseif ( $label.PRODUCT_NAME )
     <title>$label.PRODUCT_NAME[0].toLowerCase()</title>
  #else
     <title>$title</title>
  #end
     <information_model_version>1.20.0.0</information_model_version>
     <product_class>Product_Observational</product_class>
     <Modification_History>
       <Modification_Detail>
         <modification_date>$generate.current_date_utc</modification_date>
         <version_id>1.0</version_id>
         <description>Auto generated PDS4 product label created by the Transform Tool.</description>
       </Modification_Detail>
     </Modification_History>
  </Identification_Area>

  <Observation_Area>
    <Time_Coordinates>
    
    #if ( $label.START_TIME.toString() )
      #getStartTime($label.START_TIME.toString())
    #elseif ( $label.TIME_PARAMETERS.START_TIME.toString() )
      #getStartTime($label.TIME_PARAMETERS.START_TIME.toString())
    #else
      <start_date_time xsi:nil="true"></start_date_time>
    #end

    #if ( $label.STOP_TIME.toString() )
      #getStopTime($label.STOP_TIME.toString())
    #elseif ( $label.TIME_PARAMETERS.STOP_TIME.toString() )
      #getStopTime($label.TIME_PARAMETERS.STOP_TIME.toString())
    #else
      <stop_date_time xsi:nil="true"></stop_date_time>
    #end
    </Time_Coordinates>

    <Investigation_Area>
    #if ( $label.MISSION_NAME )
       #set ( $missionName = $label.MISSION_NAME )
      <name>$missionName[0].toLowerCase()</name>
      <type>Mission</type>
      <Internal_Reference>
        <lid_reference>urn:nasa:pds:investigation.$missionName[0].toLowerCase().replaceAll("\s+", ".")</lid_reference>
        <reference_type>data_to_investigation</reference_type>
      </Internal_Reference>
    #elseif ( $label.INSTRUMENT_HOST_NAME )
      #set ( $instrumentHostName = $label.INSTRUMENT_HOST_NAME )
      <name>$instrumentHostName[0].toLowerCase()</name>
      <type>Mission</type>
      <Internal_Reference>
        <lid_reference>urn:nasa:pds:investigation.$instrumentHostName[0].toLowerCase().replaceAll("\s+", ".")</lid_reference>
        <reference_type>data_to_investigation</reference_type>
      </Internal_Reference>
    #end
    </Investigation_Area>

    <Observing_System>
    #if ( $label.INSTRUMENT_HOST_NAME )
      <Observing_System_Component>
        <name>$label.INSTRUMENT_HOST_NAME[0].toLowerCase()</name>
        <type>Spacecraft</type>
      </Observing_System_Component>
    #end
    #if ( $label.INSTRUMENT_NAME )
      <Observing_System_Component>
        <name>$label.INSTRUMENT_NAME[0].toLowerCase()</name>
        <type>Instrument</type>
      </Observing_System_Component>
    #elseif ( $label.INSTRUMENT_ID )
      <Observing_System_Component>
        <name>$label.INSTRUMENT_ID[0].toLowerCase()</name>
        <type>Instrument</type>
      </Observing_System_Component>
    #end
    </Observing_System>
    <Target_Identification>
    #if ( $label.TARGET_NAME )
      <name>$label.TARGET_NAME[0].toLowerCase()</name>
      <type>Planet</type>
    #end
    </Target_Identification>
  </Observation_Area>
  #set( $objectNames = $label.getPDSObjectNames() )

  ## Support explicit FILE objects (PDS-539)
  #set ($filePtrObjectMap = {})

  #createFilePtrToObjectMap($objectNames $label $filePtrObjectMap)

  ## Group the objects by data file name
  #set ($ptrObjectMap = {})
  #createPtrToObjectMap ($objectNames $label $ptrObjectMap)

## Support explicit FILE objects (PDS-539)
#if ($filePtrObjectMap.size()>0)
  #set ($ptrObjectMap = $filePtrObjectMap)
#end

#foreach( $key in $ptrObjectMap.keySet() )
  #if ($key)
  <File_Area_Observational>
    <File>
      ## Support explicit FILE objects (PDS-539)
      #if ($filePtrObjectMap.size()>0)
        #set ( $value = $key )
        #set ( $value = $value.replaceAll("\[|\]|\(|\)","") )
        #set ( $pointer = [] )
        #foreach ( $element in $value.split(",") )
          #if ($pointer.add($element))
          #end
        #end

        #if ( $pointer.size() == 2 )
          #set ( $dataFile = $pointer[0][0].toLowerCase() )
          #if ( $pointer[1].contains("BYTES") )
            #set( $Integer = 0 )
            ## TODO: need to recheck this
            #set ( $dataFileOffset = $Integer.parseInt($pointer[1].split(" ")[0].trim()) )
          #else
            #set( $Integer = 0 )
            #set ( $offset = $Integer.parseInt($pointer[1].trim()) - 1 )
            ## TODO: need to recheck this
            #set ( $dataFileOffset = $Integer.parseInt($pointer[1].split(" ")[0].trim()) - 1 )
          #end
          #set ( $filename = $dataFile )
        #end
      #else
        #set ( $filename = $key )
      #end
      <file_name>$filename</file_name>
    </File>
    
    #if ($filePtrObjectMap.size()>0)
      #set ($objectNames = [$ptrObjectMap.get($key).getName()])
    #else
      #set ($objectNames = $ptrObjectMap.get($key))
    #end
   
    #set ( $dataFileOffset = 0 )
    #foreach( $objectName in $objectNames )
      #if ($filePtrObjectMap.size()==0)
        #set ( $value = $label.get("PTR_$objectName").toString() )
        #set ( $value = $value.replaceAll("\[|\]|\(|\)","") )
        #set ( $pointer = [] )
        #foreach ( $element in $value.split(",") )
          #if ($pointer.add($element))
          #end
        #end
        #if ( $pointer.size() == 2 )
          #set ( $dataFile = $pointer[0][0].toLowerCase() )

          #if ( $pointer[1].contains("BYTES") )
            #set( $Integer = 0 )
            #set ( $dataFileOffset = $Integer.parseInt($pointer[1].split(" ")[0].trim()) - 1 )
          #else
            #set( $Integer = 0 )
            #set ( $offset = $Integer.parseInt($pointer[1].trim()) - 1 )        
            ##PDS-541
            #if($label.RECORD_BYTES)
              #set ( $dataFileOffset = $offset * $Integer.parseInt($label.RECORD_BYTES[0].trim()) )
            #else
              #set ( $dataFileOffset = $offset )
              $log.severe("Could not find RECORD_BYTES in the label, which is needed to calculate the actual byte location for ^$objectName, which has a record offset value.")
            #end
          #end
        #elseif ( $pointer.size() == 0 )  
        #else
          #if ( !$pointer[0].trim().matches("\d+") )
            #set ( $dataFile = $pointer[0] )
            #set ( $dataFileOffset = 0 )
          #else
            #set( $Integer = 0 )
            #if ( $pointer[0].contains("BYTES") )
              #set( $Integer = 0 )
              #set ( $dataFileOffset = $Integer.parseInt($pointer[1].split(" ")[0].trim()) - 1 )
            #else
              #set ( $offset = $Integer.parseInt($pointer[0].trim()) - 1 )
              ##PDS-541
              #if($label.RECORD_BYTES)
                #set ( $dataFileOffset = $offset * $Integer.parseInt($label.RECORD_BYTES[0].trim()) )
              #else
                #set ( $dataFileOffset = $offset )
                $log.severe("Could not find RECORD_BYTES in the label, which is needed to calculate the actual byte location for ^$objectName, which has a record offset value.")
              #end
              #set ( $dataFile = $FilenameUtils.getBaseName($generate.file_name.toString()).concat(".xml") )
            #end
          #end
        #end    ## end for if ($pointer.size()==2)    
        #set ( $object = $label.get($objectName) )   
             
      #else     ## else for $filePtrObjectMap.size()==0
        #set ( $object = $ptrObjectMap.get($key) )
      #end      ## end for $filePtrObjectMap.size()==0

      ## Object-specific Parsing
      #if ( $objectName.endsWith("IMAGE") )
        #mapImage($object $dataFileOffset)
      #elseif ( $objectName.endsWith("TABLE") || $objectName.endsWith("SERIES") )  ## Product Type Specific Parsing
        #if ( $object.INTERCHANGE_FORMAT == "ASCII" )
          #set ( $tableType = "Table_Character" )
        #else
          #set ( $tableType = "Table_Binary" )
        #end
      <$tableType>
        <local_identifier>$objectName</local_identifier>
        <offset unit="byte">$dataFileOffset</offset>
        <records>$object.ROWS</records>
        #if ($tableType.equals("Table_Character"))
        <record_delimiter>Carriage-Return Line-Feed</record_delimiter>
          #set ($recordType = "Record_Character")
          #set ($fieldType = "Field_Character")
          #set ($groupType = "Group_Field_Character")
        #else
          #set ($recordType = "Record_Binary")
          #set ($fieldType = "Field_Binary")
          #set ($groupType = "Group_Field_Binary")
        #end
      
        #set ($totalGroups = 0)
        #set ($totalColumns = 0)
        <$recordType>
        #set( $value = false )
        #set ( $value = $object.CONTAINER )
        #if ( $!{value} )
          #if ( $value.class.name.contains("List") )
            #set ( $containers = $value )
          #else
            #set ( $containers = [$value] )
          #end
          #set( $Integer = 0 )
          #set ( $totalGroups = $containers.size() + $totalGroups )
        #else
          #set ( $containers = [] )
        #end
        
        #set( $value = false )
        #set ( $value = $object.COLUMN )
        #if ( $!{value} )
          #if ( $value.class.name.contains("List") )
            #set ( $columns = $value )
          #else
            #set ( $columns = [$value] )
          #end
        #else
          #set ( $columns = [] )
        #end
        
        #foreach ( $column in $columns )
          #set ( $items = false )
          #set ( $value = false )
          #set ($Integer = 0)
          #set ( $value = $column.ITEMS )
          #if ( $!{value} )
            #set( $items = $Integer.parseInt($value.toString()) )
          #else
            #set ( $items = $Integer.parseInt("0") )
          #end
          #if ( $items > 1 )
            #set( $Integer = 0 )
            #set ( $totalGroups = $totalGroups + 1 )
          #else
            #set ($totalColumns = $totalColumns + 1)
          #end
        #end
        <fields>$totalColumns</fields>
        <groups>$totalGroups</groups>
        #set ( $rowBytes = 0 )
        #set ( $rowBytes = $object.ROW_BYTES.toString().trim() )
        #if ( $object.ROW_PREFIX_BYTES )
          #set ( $rowBytes = $Integer.parseInt($object.ROW_PREFIX_BYTES.toString().trim()) + $Integer.parseInt($rowBytes) )
        #end
        #if ( $object.ROW_SUFFIX_BYTES )
          #set ( $rowBytes = $Integer.parseInt($object.ROW_SUFFIX_BYTES.toString().trim()) + $Integer.parseInt($rowBytes) )
        #end
        <record_length unit="byte">$rowBytes</record_length>
        
        #set ( $index = 0 )
        #set ( $childObjects = false)
        #set ( $value = false )
        #set ( $value = $object.getChildObjects() )
        #if ( $!{value} )
          #if ( $value.class.name.contains("List") )
            #set ( $childObjects = $value )
          #else
            #set ( $childObjects = [$value] )
          #end
        #else
          #set ( $childObjects = [] )  
        #end
        
        #foreach ( $childObject in $childObjects )      
          #if ( $childObject.getName().equals("COLUMN") )          
            #mapColumn($childObject, $fieldType, $groupType)
          #elseif ( $childObject.getName().equals("CONTAINER") )
            #mapContainer($childObject, $fieldType, $groupType)
          #end
        #end        
        </$recordType>
      </$tableType>
      #elseif ( $objectName.endsWith("SPREADSHEET") )    ## Product Type Specific Parsing
      <Table_Delimited>
        <offset unit="byte">$dataFileOffset</offset>
        <parsing_standard_id>PDS DSV 1</parsing_standard_id>
        <records>$object.ROWS</records>
        <record_delimiter>Carriage-Return Line-Feed</record_delimiter>
        #set ( $delimiter = false )
        #set( $value = false )
        #set ( $delimiter = $object.FIELD_DELIMITER )
        #if ( $!{delimiter} )
          #set ( $delimiter = $delimiter.toString().toUpperCase() )
          #if ( $delimiter.equals("COMMA") )
            #set ( $value = "Comma" )
          #elseif ( $delimiter.equals("SEMICOLON") )
            #set ( $value = "Semicolon" )
          #elseif ( $delimiter.equals("TAB") )
            #set ( $value = "Horizontal Tab" )
          #elseif ( $delimiter.equals("VERTICAL_BAR") )
            #set ( $value = "Vertical Bar" )
          #else
            #set ( $value = $delimiter )
          #end
        <field_delimiter>$value</field_delimiter>    
        #end
        <Record_Delimited>
          <fields>$object.FIELDS</fields>
          <groups>0</groups>
        #set( $value = false )
        #set ( $value = $object.get("FIELD") )
        #if ( $!{value} )
          #if ( $value.class.name.contains("List") )
            #set ( $fields = $value )
          #else
            #set ( $fields = [$value] )
          #end
        #else
          #set ($fields = [] )
        #end
        #foreach ( $field in $fields )
          <Field_Delimited>
            <name>$field.NAME.toString()[0].toLowerCase()</name>
            #getDataType($field "Field_Delimited")
            <maximum_field_length unit="byte">$field.BYTES</maximum_field_length>
          </Field_Delimited>
        #end
        </Record_Delimited>
      </Table_Delimited>
      #end    ## Product Type Specific Parsing
    #end
  </File_Area_Observational>
  #else
    $log.severe("Could not find an object: $ptrObjectMap.get($key)")
  #end
#end
</Product_Observational>

#macro( mapContainer $container $fieldType $groupType )
  <$groupType>
    <repetitions>$container.REPETITIONS</repetitions>
    #set ($totalGroups = 0)
    #set( $value = false )
    #set ( $value = $container.COLUMN )
    #if ( $!{value} )
      #if ( $value.class.name.contains("List") )
        #set ( $columns = $value )
      #else
        #set ( $columns = [$value] )
      #end
      <fields>$columns.size()</fields>
    #else
      #set ( $columns = [] )
      <fields>0</fields>
    #end

    #set( $value = false )
    #set ( $value = $container.CONTAINER )
    #if ( $!{value} )
      #if ( $value.class.name.contains("List") )
        #set ( $subContainers = $value )
      #else
        #set ( $subContainers = [$value] )
      #end
      #set( $Integer = 0 )
      #set ( $totalGroups = $subContainers.size() + $totalGroups )
    #end
         
    #foreach ( $column in $columns )
      #set ( $items = false )
      #set ( $value = false )
      #set ($Integer = 0)
      #set ( $value = $column.ITEMS )
      #if ( $!{value} )
        #set( $items = $Integer.parseInt($value.toString()) )
      #else
        #set( $items = $Integer.parseInt("0") )
      #end
      #if ( $items > 1 )
        #set( $Integer = 0 )
        #set ( $totalGroups = $totalGroups + 1 )
      #end
    #end

    <groups>$totalGroups</groups>
    
    <group_location unit="byte">$container.START_BYTE</group_location>
    #set ( $value = false )
    #set ( $Integer = 0 )
    #set ( $value = $Integer.parseInt($container.BYTES.toString()) * $Integer.parseInt($container.REPETITIONS.toString()) )
    <group_length unit="byte">$value</group_length>
    #set ( $childObjects = false)
    #set ( $value = false )
    #set ( $value = $container.getChildObjects() )
    #if ( $!{value} )
      #if ( $value.class.name.contains("List") )
        #set ( $childObjects = $value )
      #else
        #set ( $childObjects = [$value] )
      #end
    #else
      #set ( $childObjects = [] )  
    #end
        
    #foreach ( $childObject in $childObjects )
      #if ( $childObject.getName().equals("COLUMN") )
        #mapColumn($childObject, $fieldType, $groupType)
      #elseif ( $childObject.getName().equals("CONTAINER") )
        #mapContainer($childObject, $fieldType, $groupType)
      #end
    #end
  </$groupType> 
#end

#macro( mapColumn $column $fieldType $groupType)
  #set ( $items = false )
  #set ( $value = false )
  #set ($Integer = 0)
  #set ( $value = $column.ITEMS )
  #if ( $!{value} )
    #set( $items = $Integer.parseInt($value.toString()) )
  #else 
    #set( $items = $Integer.parseInt("0") )
  #end
  #if ( $items > 1 )
  <$groupType>
    <repetitions>$column.ITEMS</repetitions>
    <fields>1</fields>
    <groups>0</groups>
    <group_location unit="byte">$column.START_BYTE</group_location>
    <group_length unit="byte">$column.BYTES</group_length>
    <$fieldType>
      #set ( $bitColumns = false )
      #getBitColumns($column $fieldType $bitColumns)
      <name>$column.NAME[0].toString().toLowerCase()</name>
      <field_location unit="byte">1</field_location>
      #if ( $!{bitColumns} && $bitColumns.size() > 0 )
      <data_type>UnsignedBitString</data_type>
      #else
        #getDataType ($column $fieldType $column.ITEM_BYTES)
      #end  
      <field_length unit="byte">$column.ITEM_BYTES</field_length>
      #if ( $fieldType.equals("Field_Binary") )
        #if ( $!{bitColumns} )
      <Packed_Data_Fields>
        <bit_fields>$bitColumns.size()</bit_fields>
        #mapBitColumns($bitColumns $groupType)
      </Packed_Data_Fields>
        #else
          #set ( $bitColumns = [] )
        #end
      #end
    </$fieldType>
  </$groupType>
  #else
  <$fieldType>
    #set ( $bitColumns = false )
    #getBitColumns($column $fieldType $bitColumns)  
    <name>$column.NAME[0].toString().toLowerCase()</name>
    <field_location unit="byte">$column.START_BYTE</field_location>
    #if ( $!{bitColumns} && $bitColumns.size() > 0 )
    <data_type>UnsignedBitString</data_type>
    #else
      #getDataType ($column $fieldType $column.BYTES)
    #end
    <field_length unit="byte">$column.BYTES</field_length>
    #if ( $fieldType.equals("Field_Binary") )
      #if ( $!{bitColumns} )
        <Packed_Data_Fields>
        <bit_fields>$bitColumns.size()</bit_fields>
        #mapBitColumns($bitColumns)
        </Packed_Data_Fields>
      #else
        #set ( $bitColumns = [] )
      #end
    #end
  </$fieldType>
  #end
#end

#macro( getDataType $column $fieldType $bytes)
  #if ( $fieldType.equals("Field_Binary") )
    #if ( $column.DATA_TYPE == "MSB_INTEGER" || $column.DATA_TYPE == "INTEGER" || $column.DATA_TYPE == "SUN_INTEGER" || $column.DATA_TYPE == "MAC_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>SignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>SignedMSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>SignedMSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>SignedMSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "MSB_UNSIGNED_INTEGER" || $column.DATA_TYPE == "SUN_UNSIGNED_INTEGER" || $column.DATA_TYPE == "MAC_UNSIGNED_INTEGER" || $column.DATA_TYPE == "UNSIGNED_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>UnsignedMSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>UnsignedMSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>UnsignedMSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "LSB_INTEGER" || $column.DATA_TYPE == "PC_INTEGER" || $column.DATA_TYPE == "VAX_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>SignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>SignedLSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>SignedLSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>SignedLSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")  
      #end
    #elseif ( $column.DATA_TYPE == "LSB_UNSIGNED_INTEGER" || $column.DATA_TYPE == "PC_UNSIGNED_INTEGER" || $column.DATA_TYPE == "VAX_UNSIGNED_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>UnsignedLSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>UnsignedLSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>UnsignedLSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "IEEE_REAL" || $column.DATA_TYPE == "FLOAT" || $column.DATA_TYPE == "REAL" || $column.DATA_TYPE == "MAC_REAL" || $column.DATA_TYPE == "SUN_REAL" || $column.DATA_TYPE == "VAX_REAL" || $column.DATA_TYPE == "VAXG_REAL" || $column.DATA_TYPE == "VAX_DOUBLE")
      #if ( $bytes == "4" )
      <data_type>IEEE754MSBSingle</data_type>
      #elseif ( $bytes == "8" )
      <data_type>IEEE754MSBDouble</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.") 
      #end
    #elseif ( $column.DATA_TYPE == "PC_REAL" )
      #if ( $bytes == "4" )
      <data_type>IEEE754LSBSingle</data_type>
      #elseif ( $bytes == "8" )
      <data_type>IEEE754LSBDouble</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "PC_COMPLEX" )
      #if ( $bytes == "1" )
      <data_type>ComplexLSB8</data_type>
      #elseif ( $bytes == "2" )
      <data_type>ComplexLSB16</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "COMPLEX" || $column.DATA_TYPE == "MAC_COMPLEX" || $column.DATA_TYPE == "SUN_COMPLEX" || $column.DATA_TYPE == "VAX_COMPLEX" || $column.DATA_TYPE == "VAXG_COMPLEX" )
      #if ( $bytes == "1" )
      <data_type>ComplexMSB8</data_type>
      #elseif ( $bytes == "2" )
      <data_type>ComplexMSB16</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "MSB_BIT_STRING" || $column.DATA_TYPE == "LSB_BIT_STRING" || $column.DATA_TYPE == "VAX_BIT_STRING" || $column.DATA_TYPE == "BCD" || $column.DATA_TYPE == "BINARY_CODED_DECIMAL" || $column.DATA_TYPE == "BINARY CODED DECIMAL")
      <data_type>SignedBitString</data_type>
    #elseif ( $column.DATA_TYPE == "CHARACTER" )
      <data_type>ASCII_String</data_type>
    #elseif ($column.DATA_TYPE == "TIME" )
      <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ($column.DATA_TYPE == "DATE" )
      <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ( $column.DATA_TYPE == "BOOLEAN" )
      <data_type>UnsignedByte</data_type>
    #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
    #end
  #else
    #if ( $column.DATA_TYPE == "MSB_BIT_STRING" || $column.DATA_TYPE == "LSB_BIT_STRING" || $column.DATA_TYPE == "VAX_BIT_STRING" )
    <data_type>SignedBitString</data_type>
    #elseif ( $column.DATA_TYPE == "CHARACTER" )
    <data_type>ASCII_String</data_type>
    #elseif ($column.DATA_TYPE == "TIME" )
    <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ($column.DATA_TYPE == "DATE" )
    <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ( $column.DATA_TYPE == "BOOLEAN" )
    <data_type>UnsignedByte</data_type>
    #elseif ( $column.DATA_TYPE == "ASCII_REAL" || $column.DATA_TYPE == "ASCII REAL")
    <data_type>ASCII_Real</data_type>
    #elseif ( $column.DATA_TYPE == "ASCII_INTEGER"|| $column.DATA_TYPE == "ASCII INTEGER" || $column.DATA_TYPE == "INTEGER")
    <data_type>ASCII_Integer</data_type>
    #else
    <data_type>Unknown</data_type>
      $log.severe("Could not map a $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
    #end  
  #end

#end

#macro( mapBitColumns $bitColumns $groupType)
  #foreach ( $bitColumn in $bitColumns )
  <Field_Bit>
    <name>$bitColumn.NAME[0].toString().toLowerCase()</name>
    <start_bit_location>$bitColumn.START_BIT</start_bit_location>
    #set( $Integer = 0 )
    #set ( $stopBit = $Integer.parseInt($bitColumn.START_BIT.toString()) + $Integer.parseInt($bitColumn.BITS.toString()) - 1 )
    <stop_bit_location>$stopBit</stop_bit_location>
    #if ( $bitColumn.BIT_DATA_TYPE.toString().contains("UNSIGNED") )
      <data_type>UnsignedBitString</data_type>
    #else
      <data_type>SignedBitString</data_type>
    #end
  </Field_Bit>
  #end
#end

#macro( getBitColumns $column $fieldType $bitColumns)
  #if ( $fieldType.equals("Field_Binary") )
    #set( $value = false )
    #set ( $value = $column.BIT_COLUMN )
    #if ( $!{value} )
      #if ( $value.class.name.contains("List") )
        #set ( $bitColumns = $value )
      #else
        #set ( $bitColumns = [$value] )
      #end
    #end
  #end
#end

#macro( createPtrToObjectMap $objectNames $label $ptrObjectMap )
  #set( $validTypes = ".*IMAGE|.*TABLE|.*SERIES|.*SPREADSHEET" )
  #foreach( $objectName in $objectNames )
    #if ( $objectName.matches($validTypes) && !$objectName.endsWith("PDS4_IMAGE") )
      #set ( $value = $label.get("PTR_$objectName").toString() )
      #set ( $value = $value.replaceAll("\[|\]|\(|\)","") )
      #set ( $pointer = [] )
      #foreach ( $element in $value.split(",") )
        #if ($pointer.add($element))
        #end
      #end
      #if ( $pointer.size() == 2 )
        #set ( $dataFile = $pointer[0] )
        #if ( $pointer[1].contains("BYTES") )
          #set ( $dataFileOffset = $pointer[1].split(" ")[0] )
        #else
          #set( $Integer = 0 )
          #set ( $offset = $Integer.parseInt($pointer[1].trim()) - 1 )
          ##PDS-541
          #if($label.RECORD_BYTES)
            #set ( $dataFileOffset = $offset * $Integer.parseInt($label.RECORD_BYTES[0].trim()) )
          #else
            #set ( $dataFileOffset = $offset )
            ##$log.severe("Could not find RECORD_BYTES in the label, which is needed to calculate the actual byte location for ^$objectName, which has a record offset value.")
          #end
        #end
      #elseif ( $pointer.size() == 0 )
    
      #else
        #if ( !$pointer[0].trim().matches("\d+") )
          #set ( $dataFile = $pointer[0] )
          #set ( $dataFileOffset = 0 )
        #else
          #set( $Integer = 0 )
          #if ( $pointer[0].contains("BYTES") )
            #set ( $dataFileOffset = $pointer[0].split(" ")[0] )
          #else
            #set ( $offset = $Integer.parseInt($pointer[0].trim()) - 1 )
            ##PDS-541
            #if($label.RECORD_BYTES)
              #set ( $dataFileOffset = $offset * $Integer.parseInt($label.RECORD_BYTES.trim()) )
            #else
              #set ( $dataFileOffset = $offset )
              ##$log.severe("Could not find RECORD_BYTES in the label, which is needed to calculate the actual byte location for ^$objectName, which has a record offset value.")          
            #end
            #set ( $dataFile = $generate.file_name.toString() )
          #end
        #end
      #end
      #set ( $mapValue = false )
      #set ( $mapValue = $ptrObjectMap.get($dataFile) )
      #if ( $!{mapValue} )
        #set ( $swallow = $mapValue.add($objectName) )
      #else
        #set ($list = [])
        #set ( $swallow = $list.add($objectName) )
        $!ptrObjectMap.put($dataFile, $list)
      #end
    #end
  #end
#end

#macro( createFilePtrToObjectMap $objectNames $label $filePtrObjectMap )
  ## PDS-539 TODOT TODO TODO: should be getting pointers from the nested objects
  #set( $value = false )
  #set( $fileObjNames = [ "FILE", "UNCOMPRESSED_FILE", "COMPRESSED_FILE" ] )
  #set ( $files = [] )
  #foreach ( $fileObjName in $fileObjNames ) 
    #set ( $value = $label.get($fileObjName))
    #if ( $!{value} )
      #if ( $value.class.name.contains("List") )
        #set ( $swallow = $files.add($value))
      #else
        #set ( $swallow = $files.add($value))
      #end
    #end
  #end
  
  #set( $validTypes = ".*IMAGE|.*TABLE|.*SERIES|.*SPREADSHEET" )
  #set( $ptrObjNames = [ "IMAGE", "TABLE", "SERIES", "SPREADSHEET" ] )
  #foreach ( $file in $files )
    #set ( $childObjects = $file.getChildObjects() )
    #foreach ( $aChild in $childObjects )
      #if ( $aChild.getName().matches($validTypes) && !$aChild.getName().endsWith("PDS4_IMAGE") )
        #set ( $clist = [])
        #set ( $swallow = $clist.add($aChild) )
        #set ( $filename = $file.get("PTR_$aChild.getName()") )
        $!filePtrObjectMap.put($file.get("PTR_$aChild.getName()").toString(), $aChild)
      #end
    #end  ## end for
  #end
  ### PDS-539
#end

#macro( mapImage $object $dataFileOffset)
  #set ($type = "Array_2D_Image" )
  #set ( $value = false )
  #set ( $value = $object.BANDS.toString() )
  #if ( $!{value} )
    #set ( $bands = false )
    #set ($Integer = 0)
    #set ( $bands = $Integer.parseInt($value) )
    #if ( $bands == 3 )
      #set ( $type = "Array_3D_Image" )
    #elseif ( $bands > 3 )
      #set ( $type = "Array_3D_Spectrum" )
    #end
  #end
  <$type>
    <offset unit="byte">$dataFileOffset</offset>
    #if ( $type == "Array_2D_Image" )
    <axes>2</axes>
    #else
    <axes>3</axes>
    #end
    <axis_index_order>Last Index Fastest</axis_index_order>
    <Element_Array>
    #if ( $object.SAMPLE_TYPE == "MSB_INTEGER" || $object.SAMPLE_TYPE == "INTEGER" || $object.SAMPLE_TYPE == "SUN_INTEGER" || $object.SAMPLE_TYPE == "MAC_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>SignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>SignedMSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>SignedMSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "MSB_UNSIGNED_INTEGER" || $object.SAMPLE_TYPE == "SUN_UNSIGNED_INTEGER" || $object.SAMPLE_TYPE == "MAC_UNSIGNED_INTEGER" || $object.SAMPLE_TYPE == "UNSIGNED_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>UnsignedMSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>UnsignedMSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "LSB_INTEGER" || $object.SAMPLE_TYPE == "PC_INTEGER" || $object.SAMPLE_TYPE == "VAX_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>SignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>SignedLSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>SignedLSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "LSB_UNSIGNED_INTEGER" || $object.SAMPLE_TYPE == "PC_UNSIGNED_INTEGER" || $object.SAMPLE_TYPE == "VAX_UNSIGNED_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>UnsignedLSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>UnsignedLSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "IEEE_REAL" || $object.SAMPLE_TYPE == "FLOAT" || $object.SAMPLE_TYPE == "REAL" || $object.SAMPLE_TYPE == "MAC_REAL" || $object.SAMPLE_TYPE == "SUN_REAL" || $object.SAMPLE_TYPE == "VAX_REAL" || $object.SAMPLE_TYPE == "VAXG_REAL" || $object.SAMPLE_TYPE == "VAX_DOUBLE")
      #if ( $object.SAMPLE_BITS == "32" )
      <data_type>IEEE754MSBSingle</data_type>
      #elseif ( $object.SAMPLE_BITS == "64" )
      <data_type>IEEE754MSBDouble</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "PC_REAL" )
      #if ( $object.SAMPLE_BITS == "32" )
      <data_type>IEEE754LSBSingle</data_type>
      #elseif ( $object.SAMPLE_BITS == "64" )
      <data_type>IEEE754LSBDouble</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "PC_COMPLEX" )
      #if ( $object.SAMPLE_BITS == "64" )
      <data_type>ComplexLSB8</data_type>
      #elseif ( $object.SAMPLE_BITS == "128" )
      <data_type>ComplexLSB16</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "VAX_COMPLEX" || $object.SAMPLE_TYPE == "VAXG_COMPLEX" )
      #if ( $object.SAMPLE_BITS == "64" )
      <data_type>ComplexMSB8</data_type>
      #elseif ( $object.SAMPLE_BITS == "128" )
      <data_type>ComplexMSB16</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "MSB_BIT_STRING" || $object.SAMPLE_TYPE == "LSB_BIT_STRING" || $object.SAMPLE_TYPE == "VAX_BIT_STRING" )
      <data_type>UnsignedBitString</data_type>
    #end
    </Element_Array>
    #if ( $type == "Array_3D_Spectrum" || $type == "Array_3D_Image" )
    <Axis_Array>
      <axis_name>Band</axis_name>
      <elements>$bands</elements>
      <sequence_number>1</sequence_number>
    </Axis_Array>
    <Axis_Array>
      <axis_name>Line</axis_name>
      <elements>$object.LINES</elements>
      <sequence_number>2</sequence_number>
    </Axis_Array>
    <Axis_Array>
      <axis_name>Sample</axis_name>
      <elements>$object.LINE_SAMPLES</elements>
      <sequence_number>3</sequence_number>
    </Axis_Array>    
    #else   
    <Axis_Array>
      <axis_name>Line</axis_name>
      <elements>$object.LINES</elements>
      <sequence_number>1</sequence_number>
    </Axis_Array>
    <Axis_Array>
      <axis_name>Sample</axis_name>
      <elements>$object.LINE_SAMPLES</elements>
      <sequence_number>2</sequence_number>
    </Axis_Array>
    #end
  </$type>
#end

#macro( getStartTime $time)
  #if ( !($time.trim().equals("N/A") || $time.toString().trim().equals("NULL") || $time.toString().trim().equals("UNK")) )
    #if ( $time.toString().trim().endsWith("Z") )
      <start_date_time>${time}</start_date_time>
    #else
      <start_date_time>${time}Z</start_date_time>
    #end
  #else
    <start_date_time xsi:nil="true"></start_date_time>
  #end
#end

#macro( getStopTime $time)
  #if ( !($time.trim().equals("N/A") || $time.toString().trim().equals("NULL") || $time.toString().trim().equals("UNK")) )
    #if ( $time.toString().trim().endsWith("Z") )
      <stop_date_time>${time}</stop_date_time>
    #else
      <stop_date_time>${time}Z</stop_date_time>
    #end
  #else
    <stop_date_time xsi:nil="true"></stop_date_time>
  #end
#end
